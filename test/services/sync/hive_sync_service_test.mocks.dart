// Mocks generated by Mockito 5.4.5 from annotations
// in odtrack_academia/test/services/sync/hive_sync_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:connectivity_plus/connectivity_plus.dart' as _i7;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:odtrack_academia/core/storage/enhanced_storage_manager.dart'
    as _i2;
import 'package:odtrack_academia/core/storage/sync_queue_manager.dart' as _i5;
import 'package:odtrack_academia/models/sync_models.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EnhancedStorageManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnhancedStorageManager extends _i1.Mock
    implements _i2.EnhancedStorageManager {
  MockEnhancedStorageManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> addToSyncQueue(_i4.SyncQueueItem? item) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToSyncQueue,
          [item],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<_i4.SyncQueueItem> getPendingSyncItems() => (super.noSuchMethod(
        Invocation.method(
          #getPendingSyncItems,
          [],
        ),
        returnValue: <_i4.SyncQueueItem>[],
      ) as List<_i4.SyncQueueItem>);

  @override
  _i3.Future<void> updateSyncQueueItem(
    String? id,
    _i4.SyncStatus? status, {
    String? errorMessage,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSyncQueueItem,
          [
            id,
            status,
          ],
          {#errorMessage: errorMessage},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeCompletedSyncItems() => (super.noSuchMethod(
        Invocation.method(
          #removeCompletedSyncItems,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  Map<String, int> getSyncQueueStats() => (super.noSuchMethod(
        Invocation.method(
          #getSyncQueueStats,
          [],
        ),
        returnValue: <String, int>{},
      ) as Map<String, int>);

  @override
  _i3.Future<void> cacheData(
    String? key,
    Map<String, dynamic>? data, {
    Duration? ttl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheData,
          [
            key,
            data,
          ],
          {#ttl: ttl},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<Map<String, dynamic>?> getCachedData(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedData,
          [key],
        ),
        returnValue: _i3.Future<Map<String, dynamic>?>.value(),
      ) as _i3.Future<Map<String, dynamic>?>);

  @override
  bool isCached(String? key) => (super.noSuchMethod(
        Invocation.method(
          #isCached,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> removeCacheItem(String? key) => (super.noSuchMethod(
        Invocation.method(
          #removeCacheItem,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<int> cleanupExpiredCache() => (super.noSuchMethod(
        Invocation.method(
          #cleanupExpiredCache,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  Map<String, dynamic> getCacheStats() => (super.noSuchMethod(
        Invocation.method(
          #getCacheStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.Future<void> storeSyncConflict(_i4.SyncConflict? conflict) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeSyncConflict,
          [conflict],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  List<_i4.SyncConflict> getUnresolvedConflicts() => (super.noSuchMethod(
        Invocation.method(
          #getUnresolvedConflicts,
          [],
        ),
        returnValue: <_i4.SyncConflict>[],
      ) as List<_i4.SyncConflict>);

  @override
  _i3.Future<void> removeResolvedConflict(String? itemId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeResolvedConflict,
          [itemId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAllConflicts() => (super.noSuchMethod(
        Invocation.method(
          #clearAllConflicts,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearAllData() => (super.noSuchMethod(
        Invocation.method(
          #clearAllData,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  Map<String, dynamic> getStorageStats() => (super.noSuchMethod(
        Invocation.method(
          #getStorageStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.Future<void> optimizeStorage() => (super.noSuchMethod(
        Invocation.method(
          #optimizeStorage,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [SyncQueueManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSyncQueueManager extends _i1.Mock implements _i5.SyncQueueManager {
  MockSyncQueueManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> queueItem({
    required String? itemId,
    required String? itemType,
    required String? operation,
    required Map<String, dynamic>? data,
    int? priority = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queueItem,
          [],
          {
            #itemId: itemId,
            #itemType: itemType,
            #operation: operation,
            #data: data,
            #priority: priority,
          },
        ),
        returnValue: _i3.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #queueItem,
            [],
            {
              #itemId: itemId,
              #itemType: itemType,
              #operation: operation,
              #data: data,
              #priority: priority,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> queueODRequest({
    required String? requestId,
    required String? operation,
    required Map<String, dynamic>? requestData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queueODRequest,
          [],
          {
            #requestId: requestId,
            #operation: operation,
            #requestData: requestData,
          },
        ),
        returnValue: _i3.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #queueODRequest,
            [],
            {
              #requestId: requestId,
              #operation: operation,
              #requestData: requestData,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<String> queueUserData({
    required String? userId,
    required String? operation,
    required Map<String, dynamic>? userData,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queueUserData,
          [],
          {
            #userId: userId,
            #operation: operation,
            #userData: userData,
          },
        ),
        returnValue: _i3.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #queueUserData,
            [],
            {
              #userId: userId,
              #operation: operation,
              #userData: userData,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  List<_i4.SyncQueueItem> getNextSyncBatch({int? batchSize = 10}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextSyncBatch,
          [],
          {#batchSize: batchSize},
        ),
        returnValue: <_i4.SyncQueueItem>[],
      ) as List<_i4.SyncQueueItem>);

  @override
  _i3.Future<void> markAsInProgress(String? queueId) => (super.noSuchMethod(
        Invocation.method(
          #markAsInProgress,
          [queueId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> markAsCompleted(String? queueId) => (super.noSuchMethod(
        Invocation.method(
          #markAsCompleted,
          [queueId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> markAsFailed(
    String? queueId,
    String? errorMessage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsFailed,
          [
            queueId,
            errorMessage,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> markAsConflicted(
    String? queueId,
    String? conflictMessage,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #markAsConflicted,
          [
            queueId,
            conflictMessage,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  bool shouldRetryItem(_i4.SyncQueueItem? item) => (super.noSuchMethod(
        Invocation.method(
          #shouldRetryItem,
          [item],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<_i4.SyncQueueItem> getFailedItems() => (super.noSuchMethod(
        Invocation.method(
          #getFailedItems,
          [],
        ),
        returnValue: <_i4.SyncQueueItem>[],
      ) as List<_i4.SyncQueueItem>);

  @override
  _i3.Future<int> removeFailedItems() => (super.noSuchMethod(
        Invocation.method(
          #removeFailedItems,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  Map<String, dynamic> getQueueHealth() => (super.noSuchMethod(
        Invocation.method(
          #getQueueHealth,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.Future<int> cleanupOldItems(
          {Duration? maxAge = const Duration(days: 7)}) =>
      (super.noSuchMethod(
        Invocation.method(
          #cleanupOldItems,
          [],
          {#maxAge: maxAge},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  Map<String, dynamic> analyzeQueue() => (super.noSuchMethod(
        Invocation.method(
          #analyzeQueue,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.Future<int> resetFailedItems() => (super.noSuchMethod(
        Invocation.method(
          #resetFailedItems,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i7.Connectivity {
  MockConnectivity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i8.ConnectivityResult>> get onConnectivityChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i3.Stream<List<_i8.ConnectivityResult>>.empty(),
      ) as _i3.Stream<List<_i8.ConnectivityResult>>);

  @override
  _i3.Future<List<_i8.ConnectivityResult>> checkConnectivity() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkConnectivity,
          [],
        ),
        returnValue: _i3.Future<List<_i8.ConnectivityResult>>.value(
            <_i8.ConnectivityResult>[]),
      ) as _i3.Future<List<_i8.ConnectivityResult>>);
}
