import 'package:hive_flutter/hive_flutter.dart';
import '../../models/notification_message.dart';
import '../../models/sync_models.dart';
import '../../models/analytics_models.dart';
import '../../models/export_models.dart';
import '../../models/calendar_models.dart';
import '../../models/bulk_operation_models.dart';
import '../../models/performance_models.dart';

/// Enhanced storage configuration for M5 features
class EnhancedStorageConfig {
  // Box names for M5 features
  static const String notificationsBox = 'notifications_box';
  static const String syncQueueBox = 'sync_queue_box';
  static const String analyticsBox = 'analytics_box';
  static const String exportHistoryBox = 'export_history_box';
  static const String calendarEventsBox = 'calendar_events_box';
  static const String bulkOperationsBox = 'bulk_operations_box';
  static const String performanceMetricsBox = 'performance_metrics_box';
  static const String cacheMetadataBox = 'cache_metadata_box';
  
  /// Initialize enhanced storage with new adapters and boxes
  static Future<void> initialize() async {
    await Hive.initFlutter();
    
    // Register type adapters for M5 models
    _registerTypeAdapters();
    
    // Open all required boxes
    await _openBoxes();
  }
  
  /// Register Hive type adapters for M5 models
  static void _registerTypeAdapters() {
    // Register adapters for enums
    Hive.registerAdapter(NotificationTypeAdapter());
    Hive.registerAdapter(NotificationPriorityAdapter());
    Hive.registerAdapter(SyncStatusAdapter());
    Hive.registerAdapter(ExportFormatAdapter());
    Hive.registerAdapter(BulkOperationTypeAdapter());
    Hive.registerAdapter(PerformanceAlertTypeAdapter());
    Hive.registerAdapter(AnalyticsTypeAdapter());
    Hive.registerAdapter(ChartTypeAdapter());
    Hive.registerAdapter(TrendDirectionAdapter());
    
    // Register adapters for models
    Hive.registerAdapter(NotificationMessageAdapter());
    Hive.registerAdapter(SyncResultAdapter());
    Hive.registerAdapter(SyncConflictAdapter());
    Hive.registerAdapter(ConflictResolutionAdapter());
    Hive.registerAdapter(AnalyticsDataAdapter());
    Hive.registerAdapter(ExportResultAdapter());
    Hive.registerAdapter(ExportProgressAdapter());
    Hive.registerAdapter(CalendarAdapter());
    Hive.registerAdapter(CalendarEventAdapter());
    Hive.registerAdapter(CalendarSyncSettingsAdapter());
    Hive.registerAdapter(BulkOperationResultAdapter());
    Hive.registerAdapter(BulkOperationProgressAdapter());
    Hive.registerAdapter(PerformanceMetricsAdapter());
    Hive.registerAdapter(PerformanceAlertAdapter());
  }
  
  /// Open all required Hive boxes
  static Future<void> _openBoxes() async {
    await Future.wait([
      Hive.openBox<NotificationMessage>(notificationsBox),
      Hive.openBox<Map<String, dynamic>>(syncQueueBox),
      Hive.openBox<Map<String, dynamic>>(analyticsBox),
      Hive.openBox<ExportResult>(exportHistoryBox),
      Hive.openBox<CalendarEvent>(calendarEventsBox),
      Hive.openBox<BulkOperationResult>(bulkOperationsBox),
      Hive.openBox<PerformanceMetrics>(performanceMetricsBox),
      Hive.openBox<Map<String, dynamic>>(cacheMetadataBox),
    ]);
  }
  
  /// Get a specific box by name
  static Box<T> getBox<T>(String boxName) {
    return Hive.box<T>(boxName);
  }
  
  /// Close all boxes (for cleanup)
  static Future<void> closeAllBoxes() async {
    await Hive.close();
  }
  
  /// Clear all M5 feature data (for reset/cleanup)
  static Future<void> clearAllM5Data() async {
    final boxes = [
      notificationsBox,
      syncQueueBox,
      analyticsBox,
      exportHistoryBox,
      calendarEventsBox,
      bulkOperationsBox,
      performanceMetricsBox,
      cacheMetadataBox,
    ];
    
    for (final boxName in boxes) {
      final box = Hive.box(boxName);
      await box.clear();
    }
  }
}

// Type adapter classes (these would normally be generated by hive_generator)
// For now, we'll create placeholder adapters

class NotificationTypeAdapter extends TypeAdapter<NotificationType> {
  @override
  final int typeId = 100;

  @override
  NotificationType read(BinaryReader reader) {
    return NotificationType.values[reader.readByte()];
  }

  @override
  void write(BinaryWriter writer, NotificationType obj) {
    writer.writeByte(obj.index);
  }
}

class NotificationPriorityAdapter extends TypeAdapter<NotificationPriority> {
  @override
  final int typeId = 101;

  @override
  NotificationPriority read(BinaryReader reader) {
    return NotificationPriority.values[reader.readByte()];
  }

  @override
  void write(BinaryWriter writer, NotificationPriority obj) {
    writer.writeByte(obj.index);
  }
}

class SyncStatusAdapter extends TypeAdapter<SyncStatus> {
  @override
  final int typeId = 102;

  @override
  SyncStatus read(BinaryReader reader) {
    return SyncStatus.values[reader.readByte()];
  }

  @override
  void write(BinaryWriter writer, SyncStatus obj) {
    writer.writeByte(obj.index);
  }
}

class ExportFormatAdapter extends TypeAdapter<ExportFormat> {
  @override
  final int typeId = 103;

  @override
  ExportFormat read(BinaryReader reader) {
    return ExportFormat.values[reader.readByte()];
  }

  @override
  void write(BinaryWriter writer, ExportFormat obj) {
    writer.writeByte(obj.index);
  }
}

class BulkOperationTypeAdapter extends TypeAdapter<BulkOperationType> {
  @override
  final int typeId = 104;

  @override
  BulkOperationType read(BinaryReader reader) {
    return BulkOperationType.values[reader.readByte()];
  }

  @override
  void write(BinaryWriter writer, BulkOperationType obj) {
    writer.writeByte(obj.index);
  }
}

class PerformanceAlertTypeAdapter extends TypeAdapter<PerformanceAlertType> {
  @override
  final int typeId = 105;

  @override
  PerformanceAlertType read(BinaryReader reader) {
    return PerformanceAlertType.values[reader.readByte()];
  }

  @override
  void write(BinaryWriter writer, PerformanceAlertType obj) {
    writer.writeByte(obj.index);
  }
}

class AnalyticsTypeAdapter extends TypeAdapter<AnalyticsType> {
  @override
  final int typeId = 106;

  @override
  AnalyticsType read(BinaryReader reader) {
    return AnalyticsType.values[reader.readByte()];
  }

  @override
  void write(BinaryWriter writer, AnalyticsType obj) {
    writer.writeByte(obj.index);
  }
}

class ChartTypeAdapter extends TypeAdapter<ChartType> {
  @override
  final int typeId = 107;

  @override
  ChartType read(BinaryReader reader) {
    return ChartType.values[reader.readByte()];
  }

  @override
  void write(BinaryWriter writer, ChartType obj) {
    writer.writeByte(obj.index);
  }
}

class TrendDirectionAdapter extends TypeAdapter<TrendDirection> {
  @override
  final int typeId = 108;

  @override
  TrendDirection read(BinaryReader reader) {
    return TrendDirection.values[reader.readByte()];
  }

  @override
  void write(BinaryWriter writer, TrendDirection obj) {
    writer.writeByte(obj.index);
  }
}

// Placeholder model adapters (these would be generated by hive_generator)
class NotificationMessageAdapter extends TypeAdapter<NotificationMessage> {
  @override
  final int typeId = 200;

  @override
  NotificationMessage read(BinaryReader reader) {
    // This would be generated by hive_generator
    throw UnimplementedError('Generated by hive_generator');
  }

  @override
  void write(BinaryWriter writer, NotificationMessage obj) {
    // This would be generated by hive_generator
    throw UnimplementedError('Generated by hive_generator');
  }
}

// Additional placeholder adapters for other models
class SyncResultAdapter extends TypeAdapter<SyncResult> {
  @override
  final int typeId = 201;
  @override
  SyncResult read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, SyncResult obj) => throw UnimplementedError('Generated by hive_generator');
}

class SyncConflictAdapter extends TypeAdapter<SyncConflict> {
  @override
  final int typeId = 202;
  @override
  SyncConflict read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, SyncConflict obj) => throw UnimplementedError('Generated by hive_generator');
}

class ConflictResolutionAdapter extends TypeAdapter<ConflictResolution> {
  @override
  final int typeId = 203;
  @override
  ConflictResolution read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, ConflictResolution obj) => throw UnimplementedError('Generated by hive_generator');
}

class AnalyticsDataAdapter extends TypeAdapter<AnalyticsData> {
  @override
  final int typeId = 204;
  @override
  AnalyticsData read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, AnalyticsData obj) => throw UnimplementedError('Generated by hive_generator');
}

class ExportResultAdapter extends TypeAdapter<ExportResult> {
  @override
  final int typeId = 205;
  @override
  ExportResult read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, ExportResult obj) => throw UnimplementedError('Generated by hive_generator');
}

class ExportProgressAdapter extends TypeAdapter<ExportProgress> {
  @override
  final int typeId = 206;
  @override
  ExportProgress read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, ExportProgress obj) => throw UnimplementedError('Generated by hive_generator');
}

class CalendarAdapter extends TypeAdapter<Calendar> {
  @override
  final int typeId = 207;
  @override
  Calendar read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, Calendar obj) => throw UnimplementedError('Generated by hive_generator');
}

class CalendarEventAdapter extends TypeAdapter<CalendarEvent> {
  @override
  final int typeId = 208;
  @override
  CalendarEvent read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, CalendarEvent obj) => throw UnimplementedError('Generated by hive_generator');
}

class CalendarSyncSettingsAdapter extends TypeAdapter<CalendarSyncSettings> {
  @override
  final int typeId = 209;
  @override
  CalendarSyncSettings read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, CalendarSyncSettings obj) => throw UnimplementedError('Generated by hive_generator');
}

class BulkOperationResultAdapter extends TypeAdapter<BulkOperationResult> {
  @override
  final int typeId = 210;
  @override
  BulkOperationResult read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, BulkOperationResult obj) => throw UnimplementedError('Generated by hive_generator');
}

class BulkOperationProgressAdapter extends TypeAdapter<BulkOperationProgress> {
  @override
  final int typeId = 211;
  @override
  BulkOperationProgress read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, BulkOperationProgress obj) => throw UnimplementedError('Generated by hive_generator');
}

class PerformanceMetricsAdapter extends TypeAdapter<PerformanceMetrics> {
  @override
  final int typeId = 212;
  @override
  PerformanceMetrics read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, PerformanceMetrics obj) => throw UnimplementedError('Generated by hive_generator');
}

class PerformanceAlertAdapter extends TypeAdapter<PerformanceAlert> {
  @override
  final int typeId = 213;
  @override
  PerformanceAlert read(BinaryReader reader) => throw UnimplementedError('Generated by hive_generator');
  @override
  void write(BinaryWriter writer, PerformanceAlert obj) => throw UnimplementedError('Generated by hive_generator');
}